<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mediinfora">
	
	<!-- 회원가입(중복체크) -->
	<select id="isExistCheck" parameterType="HashMap" resultType="MemberDTO">
		select userid, email
		from member
		where (midx between 1 and 8)
		<choose>
			<when test="type == 'userid'">	<!-- 아이디 중복 체크 -->
		    	and userid = #{value}
	    	</when>
	    	<when test="type == 'email'"> <!-- 이메일 중복 체크  -->
	    		and email = #{value}
	    	</when>
		</choose>
	</select>
	
	<!-- 로그인 유저 정보 가져오기 -->
	<select id="getLoginuser" parameterType="HashMap" resultType="MemberDTO">
		SELECT userid, email, name, address, detailAddress, birthday, mobile, gender, M.registerday, midx, hidx
			   , loginmethod
		       , pwdUpdategap
		       , NVL(lastlogingap, trunc( months_between(sysdate, M.registerday) )) AS lastlogingap
		FROM
		(
		    select userid, email, name, address, detailAddress, birthday, mobile, gender, registerday, midx, hidx
		           , loginmethod
		           , trunc( months_between(sysdate, pwdupdateday) ) as pwdUpdategap
		    from member
		    where (midx between 0 and 8)
		    <choose>
		    	<when test="loginmethod eq 0">	<!-- 일반로그인 -->
		    		and loginmethod = #{loginmethod} and userid = #{userid} and pwd = #{pwd}
		    	</when>
		    	<when test="loginmethod eq 1"> <!-- 카카오 로그인  -->
		    		and loginmethod = #{loginmethod} and userid = #{userid}
		    	</when>
		    </choose>
		)M
		CROSS JOIN
		(
		    select trunc( months_between(sysdate, max(registerday)) ) as lastlogingap
		    from loginlog
		    where userid = #{userid}
		) L
	</select>
	
	<!-- 회원코드 변경 (휴먼처리) -->
	<update id="updatemIdx" parameterType="HashMap">
		update member set mIdx = to_number(#{idx})
		where userid = #{userid}
	</update>
	
	<!-- 로그인 유저 ip 기록 -->
	<insert id="insert_log" parameterType="HashMap">
		insert into loginlog(userid, ip, registerday)
		values(#{userid}, #{clientip}, sysdate)
	</insert>
	
	<!-- 병원정보 입력 API -->
	<insert id="hpApiInputer" parameterType="HospitalDTO">
		INSERT INTO HOSPITAL (HIDX, HPNAME, HPADDR, HPTEL, CLASSCODE, AGENCY, WGS84LON, WGS84LAT,
		STARTTIME1, STARTTIME2, STARTTIME3, STARTTIME4, STARTTIME5, STARTTIME6, STARTTIME7, STARTTIME8,
        ENDTIME1, ENDTIME2, ENDTIME3, ENDTIME4, ENDTIME5, ENDTIME6, ENDTIME7, ENDTIME8)
		VALUES (seq_hidx.nextval, #{hpname}, #{hpaddr}, #{hptel}, #{classcode}, #{agency}, #{wgs84lon}, #{wgs84lat}, 
		#{starttime1}, #{starttime2}, #{starttime3}, #{starttime4}, #{starttime5}, #{starttime6}, #{starttime7}, #{starttime8},
		#{endtime1}, #{endtime2}, #{endtime3}, #{endtime4}, #{endtime5}, #{endtime6}, #{endtime7}, #{endtime8})
	</insert>
	
	<!-- 행정구역 입력 -->
	<insert id="areaInputer" parameterType="KoreaAreaVO">
		INSERT INTO KOREAAREA (LOCAL, AREA)
		VALUES (#{local}, #{area})
	</insert>
	
	<!-- 행정구역 리스트 -->
	<select id="getareainfo" resultType="String">
		select area from KOREAAREA group by area
	</select>
	
	<!-- 시/군/구 리스트 -->
	<select id="getlocalinfo" parameterType="String" resultType="String">
		select local from KOREAAREA where AREA = #{area}
	</select>
	
	<!-- 진료과목 리스트 -->
	<select id="getclasscode" resultType="ClasscodeDTO">
		select CLASSCODE,CLASSNAME from CLASSCODE
	</select>
	
</mapper>