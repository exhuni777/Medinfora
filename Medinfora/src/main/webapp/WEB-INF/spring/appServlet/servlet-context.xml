<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- ==== #18. 이미지, 동영상, js, css 파일등이 위치하는 경로를 의미한다. -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- === #19. 엑셀파일다운로드를 위해  BeanNameViewResolver 추가하기 === -->
    <!-- 	스프링 프레임워크(Spring Framework)에서 JSP가 아닌 컨트롤러를 호출하여 파일을 다운로드 하려면 다음과 같은 단계를 거쳐야 한다. 
       		BeanNameViewResolver 뷰 리졸버를 추가한 후 파일 다운로드를 처리해줄 빈을 등록한다.
           	쉽게 생각해서 파일 다운로드 처리를 해주는 view 페이지 라고 생각하면 된다.
    -->
    <beans:bean id="excelDownloadView" class="com.spring.app.excelfile.ExcelDownloadView"/>
   	<beans:bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
    	<beans:property name="order" value="0"/>
    </beans:bean>
    <!-- BeanNameViewResolver 는 컨트롤러에서 리턴 받은 뷰의 이름과 빈에 등록되어 있는 id의 값이 같은것을 찾아서 빈을 실행시킬 때 쓰인다.
       	  주로 커스텀하게 만들어진 View 클래스를 뷰로 사용해야 하는 경우에 사용한다.
   
		  예를 들어 
		  컨트롤러에서 뷰의 이름을 excelDownloadView 으로 주면 (즉, 리턴만 excelDownloadView 로 주면) 
         bean 객체의 id가 excelDownloadView 인것을 찾는다.

         @RequestMapping(value="/testExcel.action")
         public String testExcel() {
             return "excelDownloadView";
         }

         <beans:bean id="excelDownloadView" class="com.spring.app.excel.ExcelDownloadView"/>
                    그리하여 com.spring.excel.ExcelDownloadView 클래스가 실행된다.    
                
                    컨트롤러에서 view단 매핑시 jsp 파일로 매핑되지 않고, 해당 객체로 바로 매핑해주기 위해서는 
         servlet-context.xml 에서 BeanNameViewResolver 를 빈즈로 등록해주어야 한다.
                    여기서 중요한것은 BeanNameViewResolver 빈즈의 순서가 InternalResourceViewResolver 보다 우선 이어야한다는 것이다.
      
         InternalResourceViewResolver가 BeanNameViewResolver 보다 더 우선순위를 갖으면 엑셀다운로드 작업을 진행하지 않고 
                   해당 매핑이름에 .jsp를 달고 view를 찾게되기 때문이다.
        (ex : excelDownloadView.jsp를 찾느게 아니라 com.spring.app.excel.ExcelDownloadView 클래스파일의 실행이 필요한것이다.)
   	--> 



	<!-- ======= #20. 실행시 모든 페이지에 기본틀이 되어지는 틀을 배치하기 위한 템플릿 프레임워크인 TilesViewResolver 를 사용하기 위해 빈으로 등록한다. ======= -->
   	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                 <beans:value>/WEB-INF/tiles/tiles-layout.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
    
    <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <beans:property name="order" value="1"/>
    </beans:bean>
    
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<context:component-scan base-package="com.spring.app" />
	
	<!-- === #44. 양방향 암호화 알고리즘인 AES256 를 사용하여 복호화 하기 위한 클래스(파라미터가 있는 생성자) 의존객체 bean 생성하기 === --> 
   	<beans:bean id="aES256" class="com.spring.app.common.AES256">
      	<beans:constructor-arg>
         	<beans:value>pipomedinfora03$</beans:value> <!-- SecretMyKey 에 있는 key -->   
      	</beans:constructor-arg>
   	</beans:bean>
	
	<!-- ===== #22. AOP 관련 어노테이션 동작이 가능하게 설정   -->   
   	<aop:aspectj-autoproxy />
   	
   	<aop:config proxy-target-class="true">
		<aop:pointcut id="controllerOperation" expression="execution(public * com.spring.app..*Controller.*(..))" />
    </aop:config>
    
   <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="defaultEncoding" value="100000000" />
        <beans:property name="maxUploadSize" value="100000000" /> <!-- 10MB -->
    </beans:bean>

    <aop:aspectj-autoproxy />
    
    <aop:config proxy-target-class="true">
        <aop:pointcut id="controllerOperation" expression="execution(public * com.spring.app..*Controller.*(..))" />
    </aop:config>
  
    
</beans:beans>
