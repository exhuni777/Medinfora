<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="medinfora">
	
	<!-- 회원가입(중복체크) -->
	<select id="isExistCheck" parameterType="HashMap" resultType="MemberDTO">
		select userid, email
		from member
		where (midx between 1 and 8)
		<choose>
			<when test="type == 'userid'">	<!-- 아이디 중복 체크 -->
		    	and userid = #{value}
	    	</when>
	    	<when test="type == 'email'"> <!-- 이메일 중복 체크  -->
	    		and email = #{value}
	    	</when>
		</choose>
	</select>
	
	<!-- 회원가입(병원찾기 자동검색) -->
	<select id="autoWord" parameterType="HashMap" resultType="String">
	    SELECT 
	    <choose>
	    	<when test='searchType == "hpname"'>hpname</when>
	    	<when test='searchType == "hpaddr"'>hpaddr</when>
	    </choose>
	    FROM(
	    	select row_number() over(order by hidx desc) AS rno,
	    	<choose>
		    	<when test='searchType == "hpname"'>hpname</when>
		    	<when test='searchType == "hpaddr"'>hpaddr</when>
	    	</choose>
	    	from hospital
	    	<choose>
		       	<when test='searchType == "hpname" and searchWord != ""'>
		          	where lower(hpname) like '%'||lower(#{searchWord})||'%'  
		       	</when>
		       	<when test='searchType == "hpaddr" and searchWord != ""'>
		          	where lower(hpaddr) like '%'||lower(#{searchWord})||'%'
		       	</when>
		    </choose>
	    	)H
	    WHERE rno between 0 and 8
	    group by 
	    <choose>
	    	<when test='searchType == "hpname"'>hpname</when>
	    	<when test='searchType == "hpaddr"'>hpaddr</when>
	    </choose>
	</select>
	
	<!-- 회원가입(병원찾기 총검색 개수 알아오기) -->
	<select id="totalhospital" parameterType="HashMap" resultType="int">
		WITH B
		AS(
		    SELECT count(*) as CNT
		    FROM(
		        select hpname, hpaddr
		        from hospital
		        where 1=1
				<choose>
					<when test='searchType == "hpname"'>
						and lower(hpname) like '%'||lower(#{searchWord})||'%'
					</when>
					<when test='searchType == "hpaddr"'>
						and lower(hpaddr) like '%'||lower(#{searchWord})||'%'
					</when>
				</choose>
		        )H
		    GROUP BY hpname, hpaddr
		)
		SELECT COUNT(*)
		FROM B
	</select>
	
	
	
	<!-- 회원가입(병원찾기 검색 병원리스트) -->
	<select id="hpSearch" parameterType="HashMap" resultType="HospitalDTO">	    
	    WITH B
		AS(
		    SELECT hpname, hpaddr, hptel
		    FROM(
		        select row_number() over(order by hidx) AS rno
		             , hpname, hpaddr, replace(hptel, '-', '') as hptel
		        from hospital
		        <choose>
			       	<when test='searchType == "hpname" and searchWord != ""'>
			          	where lower(hpname) like '%'||lower(#{searchWord})||'%'  
			       	</when>
			       	<when test='searchType == "hpaddr" and searchWord != ""'>
			          	where lower(hpaddr) like '%'||lower(#{searchWord})||'%'
			       	</when>
		    	</choose>
		        )H
		    WHERE rno between #{startRno} and #{endRno}
		    GROUP BY hpname, hpaddr, hptel
		)
		SELECT hpname, hpaddr, hptel
		FROM B
		ORDER BY hpname
	</select>
	
	
	<!-- 회원가입(병원찾기 병원정보 입력) -->
	<select id="searchMedicalEnd" parameterType="HashMap" resultType="HospitalDTO">
		SELECT hidx, hpname, hpaddr, hptel
	    FROM(
	        select row_number() over(order by hidx) AS rno
	             , hidx, hpname, hpaddr, replace(hptel, '-', '') as hptel
	        from hospital
	        where hpname = #{hpname} and hpaddr = #{hpaddr}
        )H
        WHERE rno = 1
	</select>
	
	
	<!-- 회원가입하기 -->
	<insert id="registerEnd" parameterType="HashMap">
		insert into member ( userid, pwd, email, name, mobile, address ,
						     midx, registerday, pwdUpdateday, loginmethod
		<choose>
			<when test='join == "1" or join == "3"'>
				 , detailAddress, birthday, gender
			</when>
		</choose>
		)
		values( #{userid}, #{pwd}, #{email}, #{name}, #{mobile}, #{address},
			    to_number(#{midx}), to_char(sysdate, 'yyyymmdd'), to_char(sysdate, 'yyyymmdd'), to_number(#{loginmethod})
		<choose>
			<when test='join == "1" or join == "3"'>
				, #{detailAddress}, #{birthday}, to_number(#{gender})
			</when>
		</choose>
		)
	</insert>
	
	
	<!-- 로그인 유저 정보 가져오기 -->
	<select id="getLoginuser" parameterType="HashMap" resultType="MemberDTO">
		SELECT userid, email, name, address, detailAddress, birthday, mobile, gender, M.registerday, midx
			   , loginmethod
		       , pwdUpdategap
		       , NVL(lastlogingap, trunc(months_between(sysdate, M.registerday) )) AS lastlogingap
		FROM
		(
		    select userid, email, name, address, detailAddress, birthday, mobile, gender, registerday, midx
		           , loginmethod
		           , trunc( months_between(sysdate, pwdupdateday) ) as pwdUpdategap
		    from member
		    where (midx between 0 and 8)
		    <choose>
		    	<when test="loginmethod eq 0">	<!-- 일반로그인 -->
		    		and loginmethod = #{loginmethod} and userid = #{userid} and pwd = #{pwd}
		    	</when>
		    	<when test="loginmethod eq 1"> <!-- 카카오 로그인  -->
		    		and loginmethod = #{loginmethod} and userid = #{userid}
		    	</when>
		    </choose>
		)M
		CROSS JOIN
		(
		    select trunc(months_between(sysdate,max(to_date(REGISTERDAY,'YYYY-MM-DD HH24:MI:SS')))) as lastlogingap
		    from loginlog
		    where userid = #{userid}
		    group by userid
		)L
	</select>
	
	<!-- 회원코드 변경 (휴먼처리) -->
	<update id="updatemIdx" parameterType="HashMap">
		update member set mIdx = to_number(#{idx})
		where userid = #{userid}
	</update>
	
	<!-- 로그인 유저 ip 기록 -->
	<insert id="insert_log" parameterType="HashMap">
		insert into loginlog(userid, ip)
		values(#{userid}, #{clientip})
	</insert>
	
	<!-- 병원정보 입력 API -->
	<insert id="hpApiInputer" parameterType="HospitalDTO">
		INSERT INTO HOSPITAL (HIDX, HPNAME, HPADDR, HPTEL, CLASSCODE, AGENCY, WGS84LON, WGS84LAT,
		STARTTIME1, STARTTIME2, STARTTIME3, STARTTIME4, STARTTIME5, STARTTIME6, STARTTIME7, STARTTIME8,
        ENDTIME1, ENDTIME2, ENDTIME3, ENDTIME4, ENDTIME5, ENDTIME6, ENDTIME7, ENDTIME8)
		VALUES (seq_hidx.nextval, #{hpname}, #{hpaddr}, #{hptel}, #{classcode}, #{agency}, #{wgs84lon}, #{wgs84lat}, 
		#{starttime1}, #{starttime2}, #{starttime3}, #{starttime4}, #{starttime5}, #{starttime6}, #{starttime7}, #{starttime8},
		#{endtime1}, #{endtime2}, #{endtime3}, #{endtime4}, #{endtime5}, #{endtime6}, #{endtime7}, #{endtime8})
	</insert>
	
	<!-- 행정구역 입력 -->
	<insert id="areaInputer" parameterType="KoreaAreaVO">
		INSERT INTO KOREAAREA (CITY, LOCAL, COUNTRY)
		VALUES (#{city}, #{local}, #{country})
	</insert>
	
	<!-- 행정구역 리스트 -->
	<select id="getcityinfo" resultType="String">
		select city from KOREAAREA group by city
		Order by city
	</select>
	
	<!-- 시/군/구 리스트 -->
	<select id="getlocalinfo" parameterType="String" resultType="String">
		select local from KOREAAREA where city = #{city} group by local
		Order by local
	</select>
	
	<!-- 읍/면/동 리스트 -->
	<select id="getcountryinfo" parameterType="KoreaAreaVO" resultType="String">
		select country from KOREAAREA where city = #{city} and local = #{local}
		order by country
	</select>
	
	<!-- 진료과목 리스트 -->
	<select id="getclasscode" resultType="ClasscodeDTO">
		select CLASSCODE,CLASSNAME from CLASSCODE
	</select>
	
	<!-- 공휴일 입력 -->
	<insert id="holidayInputer" parameterType="HolidayVO">
		INSERT INTO HOLIDAY (SUMMARY, HOLIDAY_DATE)
		VALUES (#{summary}, #{holiday_date})
	</insert>
	
	<!-- ClasscodeList 가져오기 -->
	<select id="getclassCodeList" parameterType="HashMap" resultType="String">
		select CLASSCODE
		from HOSPITAL
		where HPNAME like #{hpname} and HPADDR like #{hpaddr}
	</select>
	
	<!-- CLASSMET 입력용 -->
	<insert id="classcodeMetInput" parameterType="HashMap">
		INSERT INTO CLASSCODEMET (USERID, CLASSCODE, HIDX)
		VALUES (#{userid}, #{classcode}, #{hidx})
	</insert>

</mapper>